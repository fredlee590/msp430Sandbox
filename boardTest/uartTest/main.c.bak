/*
main.c - uartPythonTest
This main demonstrates how to communicate with a Python script using the Python
serial library

Turns on LEDs and sends back data depending on options sent by Python script
*/

#include "msp430.h"

#define XIN     BIT6    /* P2.6 - crystal oscillator in */
#define XOUT    BIT7    /* P2.7 - crystal oscillator out */

#define UARTTX  BIT4    /* P3.4 - UART Tx pin */
#define UARTRX  BIT5    /* P3.5 - UART Rx pin */
#define LED     BIT6    /* P3.6 - LED VCC */

#define CONFSTR "khan"

/*
this main demonstrates UART in several different ways. Use to develop functions
using UART module to replace bit banging.
*/

void exampleUARTSetup( void );
unsigned char myStrLen( char* );
void transmitChar( unsigned char );
void transmitString( char* );

// main loop
int main( void )
{
  // Stop watchdog timer to prevent time out reset
  WDTCTL = WDTPW + WDTHOLD;
  
  exampleUARTSetup();
}

// set up UART to use 1 MHz digital clock
// set up to display ACLK and SMCLK
// enter low power mode and rely on interrupts
void exampleUARTSetup( void )
{
  // set up clocks (DCO)
  DCOCTL = CALDCO_1MHZ; // configure DCO clock DCO and MOD
  BCSCTL1 = CALBC1_1MHZ; // configure DCO clock RESL
  BCSCTL2 = SELS; /* SMCLK = ACLK */
  BCSCTL3 = LFXT1S_0 | XCAP_1; /* use 32768 Hz XT1 with 6pF effective load cap */
  
  P2SEL = XIN | XOUT;
  
  P3DIR = LED;
  P3SEL = UARTTX | UARTRX;                  // P3.4,5 = USCI_A0 TXD/RXD
  P3OUT = 0;

  // configure UCSI module for UART mode
  UCA0CTL1 |= UCSWRST;
  UCA0CTL1 |= UCSSEL_2;                     // BRCLK = SMCLK = ACLK = 32kHz crystal
  UCA0BR0 = 3;                              // 32kHz/9600 = 3
  UCA0BR1 = 0x00;
  UCA0MCTL = UCBRS1 | UCBRS0;               // Modulation UCBRSx = 3
  UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
  IE2 |= UCA0RXIE;                          // Enable USCI_A0 TX interrupt

  __bis_SR_register(LPM3_bits + GIE);       // Enter LPM3, interrupts enabled
}

// USCI A0/B0 Receive ISR
// takes input character and sends back different strings through UART
// reprints original
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
  switch(UCA0RXBUF)
  {
  case 'a':
    P3OUT |= LED;
    transmitChar('x');
    break;
  case 'b':
    P3OUT &= ~LED;
    transmitChar('y');
    break;
  case 'q':
    P3OUT = 0;
    transmitChar('z');
    break;
  default:
    break;
  }
  transmitString(CONFSTR);
}

void transmitChar(unsigned char charToTransmit)
{
  while (!(IFG2&UCA0TXIFG));
  UCA0TXBUF = charToTransmit;
}

// lighter weight strlen than strlen - avoid getting all of strings.h
unsigned char myStrLen(char* str)
{
  unsigned char i = 0;
  while(*(str + i++) != '\0');
  return i - 1;
}

// transmit multiple character word with the USCI_A module
void transmitString(char* strToTransmit)
{
  unsigned int i;
  unsigned char len = myStrLen(strToTransmit);
  for(i = 0; i < len; i++)
  {
    transmitChar(*(strToTransmit + i));
  }
}